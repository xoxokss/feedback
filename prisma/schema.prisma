generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model File {
  id        Int      @id @default(autoincrement())
  fileName  String   @map("file_name") @db.VarChar(255)
  fileType  String   @map("file_type") @db.VarChar(255)
  fileSize  Int      @map("file_size")
  filePath  String   @map("file_path") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Project   Project?
}

model Project {
  id             Int              @id @default(autoincrement())
  imageId        Int              @unique @map("image_id")
  title          String           @db.VarChar(255)
  intro          String           @db.VarChar(255)
  content        String           @db.Text
  likeCount      Int              @default(0) @map("like_count") @db.SmallInt
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  userId         Int              @map("user_id")
  image          File             @relation(fields: [imageId], references: [id])
  User           User             @relation(fields: [userId], references: [id])
  Likes          ProjectOnLikes[]
  ProjectsOnTags ProjectsOnTags[]

  @@index([userId])
}

model Tag {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  ProjectsOnTags ProjectsOnTags[]
}

model ProjectsOnTags {
  projectId Int      @map("project_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  project   Project  @relation(fields: [projectId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([projectId, tagId])
  @@index([tagId])
}

model User {
  id           Int              @id @default(autoincrement())
  username     String           @unique @db.VarChar(100)
  password     String?          @db.VarChar(100)
  email        String           @unique @db.VarChar(100)
  nickname     String           @unique
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @default(now()) @updatedAt @map("updated_at")
  Project      Project[]
  Like         ProjectOnLikes[]
  Survey       Survey[]
  SurveyAnswer SurveyAnswer[]
}

model ProjectOnLikes {
  projectId Int     @map("project_id")
  userId    Int     @map("user_id")
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@index([projectId, userId])
  @@index([userId], map: "ProjectOnLikes_userId_fkey")
}

model Survey {
  id             Int              @id @default(autoincrement())
  userId         Int              @map("user_id")
  surveyTitle    String           @db.VarChar(255)
  User           User             @relation(fields: [userId], references: [id])
  SurveyAnswer   SurveyAnswer[]
  SurveyQuestion SurveyQuestion[]

  @@index([userId], map: "Survey_user_id_fkey")
}

model SurveyAnswer {
  id             Int            @id @default(autoincrement())
  questionId     Int            @map("question_id")
  userId         Int            @map("user_id")
  answer         String         @db.VarChar(255)
  surveyId       Int            @map("survey_id")
  SurveyQuestion SurveyQuestion @relation(fields: [questionId], references: [id])
  Survey         Survey         @relation(fields: [surveyId], references: [id])
  User           User           @relation(fields: [userId], references: [id])

  @@index([questionId, userId])
  @@index([surveyId], map: "SurveyAnswer_survey_id_fkey")
  @@index([userId], map: "SurveyAnswer_userId_fkey")
}

model SurveyQuestion {
  id               Int            @id @default(autoincrement())
  surveyId         Int            @map("survey_id")
  questionTitle    String         @map("question_title") @db.VarChar(255)
  questionType     String         @map("question_type") @db.VarChar(255)
  questionModel    String         @map("question_model") @db.VarChar(255)
  questionRequired Boolean        @default(false) @map("question_required")
  questionOrder    Int            @map("question_order")
  Survey           Survey         @relation(fields: [surveyId], references: [id])
  SurveyAnswer     SurveyAnswer[]

  @@index([surveyId])
}
