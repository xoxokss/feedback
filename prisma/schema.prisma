generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Answer {
  id              Int         @id @default(autoincrement())
  answer_sheet_id Int
  question_id     Int
  answer          String      @db.VarChar(255)
  AnswerSheet     AnswerSheet @relation(fields: [answer_sheet_id], references: [id])
  Question        Question    @relation(fields: [question_id], references: [id])

  @@index([answer_sheet_id], map: "Answer_answer_sheet_id_fkey")
  @@index([question_id, answer_sheet_id])
}

model AnswerSheet {
  id        Int      @id @default(autoincrement())
  surveyId Int      @map("survey_id")
  userId   Int      @map("user_id")
  Survey    Survey   @relation(fields: [surveyId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  Answer    Answer[]

  @@index([surveyId], map: "AnswerSheet_survey_id_fkey")
  @@index([userId], map: "AnswerSheet_user_id_fkey")
}

model File {
  id         Int      @id @default(autoincrement())
  file_name  String   @db.VarChar(255)
  file_type  String   @db.VarChar(255)
  file_size  Int
  file_path  String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime
  Project    Project?
}

model Project {
  id             Int              @id @default(autoincrement())
  image_id       Int              @unique
  survey_id      Int              @unique
  title          String           @db.VarChar(255)
  intro          String           @db.VarChar(255)
  content        String           @db.Text
  like_count     Int              @default(0) @db.SmallInt
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  user_id        Int
  File           File             @relation(fields: [image_id], references: [id])
  Survey         Survey           @relation(fields: [survey_id], references: [id])
  User           User             @relation(fields: [user_id], references: [id])
  ProjectOnLikes ProjectOnLikes[]
  ProjectsOnTags ProjectsOnTags[]

  @@index([user_id])
}

model ProjectOnLikes {
  project_id Int
  user_id    Int
  Project    Project @relation(fields: [project_id], references: [id])
  User       User    @relation(fields: [user_id], references: [id])

  @@id([project_id, user_id])
  @@index([project_id, user_id])
  @@index([user_id], map: "ProjectOnLikes_userId_fkey")
}

model ProjectsOnTags {
  project_id Int
  tag_id     Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Project    Project  @relation(fields: [project_id], references: [id])
  Tag        Tag      @relation(fields: [tag_id], references: [id])

  @@id([project_id, tag_id])
  @@index([tag_id])
}

model Question {
  id                Int      @id @default(autoincrement())
  survey_id         Int
  question_title    String   @db.VarChar(255)
  question_type     String   @db.VarChar(255)
  question_model    String   @db.VarChar(255)
  question_required Boolean  @default(false)
  question_order    Int
  Survey            Survey   @relation(fields: [survey_id], references: [id])
  Answer            Answer[]

  @@index([survey_id])
}

model Survey {
  id          Int           @id @default(autoincrement())
  user_id     Int
  surveyTitle String        @db.VarChar(255)
  User        User          @relation(fields: [user_id], references: [id])
  AnswerSheet AnswerSheet[]
  Project     Project?
  Question    Question[]

  @@index([user_id], map: "Survey_user_id_fkey")
}

model Tag {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  ProjectsOnTags ProjectsOnTags[]
}

model User {
  id             Int              @id @default(autoincrement())
  userId         String           @unique @db.VarChar(100)
  password       String?          @db.VarChar(100)
  email          String           @unique @db.VarChar(100)
  nickname       String           @unique @db.VarChar(100)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  profileImg     String?          @db.VarChar(100)
  AnswerSheet    AnswerSheet[]
  Project        Project[]
  ProjectOnLikes ProjectOnLikes[]
  Survey         Survey[]
}
