// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model File {
  id        Int      @id @default(autoincrement())
  fileName  String   @map("file_name") @db.VarChar(255)
  fileType  String   @map("file_type") @db.VarChar(255)
  fileSize  Int      @map("file_size")
  filePath  String   @map("file_path") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Project   Project?
}

model Project {
  id             Int              @id @default(autoincrement())
  image          File             @relation(fields: [imageId], references: [id])
  imageId        Int              @unique @map("image_id")
  title          String           @db.VarChar(255)
  intro          String           @db.VarChar(255)
  content        String           @db.Text
  likeCount      Int              @db.SmallInt @default(0) @map("like_count")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  userId         Int              @map("user_id")
  User           User             @relation(fields: [userId], references: [id])
  Likes          ProjectOnLikes[]
  ProjectsOnTags ProjectsOnTags[]
}

model Tag {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  ProjectsOnTags ProjectsOnTags[]
}

model ProjectsOnTags {
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int      @map("project_id")
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([projectId, tagId])
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(100)
  password  String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  nickname  String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  Project   Project[]
  Like      ProjectOnLikes[]
}

model ProjectOnLikes {
  projectId Int      @map("project_id")
  userId    Int      @map("user_id")

  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@index([projectId, userId])
} 
